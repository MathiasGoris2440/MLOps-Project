name: Update Model and Redeploy FastAPI on Kubernetes

on:
  workflow_dispatch:  # Manual trigger for testing
 

jobs:
  update-model-and-redeploy:
    runs-on: self-hosted # Assumes this runner has Docker, kubectl, and k3d installed and configured

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Azure ML Authentication and Model Download (Existing Steps) ---
      - name: Install Azure CLI and ML extension
        run: |
          pip install azure-cli
          az extension add -n ml -y

      - name: Azure login
        run: |
          az login --service-principal `
            --username $env:AZURE_CLIENT_ID `
            --password $env:AZURE_CLIENT_SECRET `
            --tenant $env:AZURE_TENANT_ID
          az account set --subscription $env:AZURE_SUBSCRIPTION_ID
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Remove old model folder
        run: |
          # Use Test-Path and Remove-Item for PowerShell
          if (Test-Path "inference/smurf-regressor") {
            Remove-Item -Recurse -Force "inference/smurf-regressor"
          }

      - name: Get latest model version
        id: get_model_version
        run: |
          $version = az ml model list `
            --name smurf-regressor `
            --query "[].version | sort(@)[-1]" `
            -o tsv
          echo "LATEST_VERSION=$version" >> $env:GITHUB_ENV

      - name: Download latest model
        run: |
          az ml model download `
            --name smurf-regressor `
            --version $env:LATEST_VERSION `
            --download-path ./inference
      # --- End Azure ML Authentication and Model Download ---


      # --- Docker Build and Push (Existing Steps) ---
      - name: Docker login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Tag Docker image
        run: |
          docker build -t smurf-fastapi .
          docker tag smurf-fastapi:latest ${{ secrets.DOCKER_USERNAME }}/smurf-fastapi:latest

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/smurf-fastapi:latest
      # --- End Docker Build and Push ---


      # --- Kubernetes Deployment & Rollout (Modified Steps) ---
      - name: Setup k3d kubeconfig and Apply K8s Manifests
        run: |
          # Ensure k3d is in PATH or provide full path if needed
          k3d kubeconfig get k3s-default > $HOME/.kube/config
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

          # Verify kubectl can connect
          kubectl cluster-info

          # --- Apply all K8s manifests to ensure deployments exist ---
          # This should be done every time to ensure the cluster state matches your YAMLs
          # It's idempotent, meaning it won't create duplicates if they exist,
          # but it will create them if they don't, or update them if changes are made to the YAMLs.
          kubectl create namespace smurf-project --dry-run=client -o yaml | kubectl apply -f - # Create if not exists
          kubectl apply -f k8s/deployment.yaml -n smurf-project
          kubectl apply -f k8s/service.yaml -n smurf-project
          kubectl apply -f k8s/frontend-deployment.yaml -n smurf-project
          kubectl apply -f k8s/frontend-service.yaml -n smurf-project
          kubectl apply -f k8s/ingress.yaml -n smurf-project
          # --- End Apply K8s manifests ---

      - name: Trigger Kubernetes Deployment Rollout Restart for FastAPI
        # Now that we've applied the manifests, the deployment should exist.
        # This command forces the 'smurf-fastapi' deployment to restart its pods.
        run: |
          kubectl rollout restart deployment/smurf-fastapi -n smurf-project
          kubectl rollout status deployment/smurf-fastapi -n smurf-project

      - name: Verify Pod Status (Optional)
        run: |
          sleep 10
          kubectl get pods -n smurf-project -o wide
