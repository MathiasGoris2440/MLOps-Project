name: Update Model and Redeploy FastAPI on Kubernetes

on:
  workflow_dispatch:  # Manual trigger for testing
  # You could also trigger this on push to a specific branch or path if needed:
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - 'inference/smurf-regressor/INPUT_model_path/**' # Or whatever path indicates model changes

jobs:
  update-model-and-redeploy:
    runs-on: self-hosted # Assumes this runner has Docker, kubectl, and k3d installed and configured

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Azure ML Authentication and Model Download (Existing Steps) ---
      - name: Install Azure CLI and ML extension
        run: |
          pip install azure-cli
          az extension add -n ml -y

      - name: Azure login
        run: |
          az login --service-principal `
            --username $env:AZURE_CLIENT_ID `
            --password $env:AZURE_CLIENT_SECRET `
            --tenant $env:AZURE_TENANT_ID
          az account set --subscription $env:AZURE_SUBSCRIPTION_ID
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Remove old model folder
        run: |
          # Use Test-Path and Remove-Item for PowerShell
          if (Test-Path "inference/smurf-regressor") {
            Remove-Item -Recurse -Force "inference/smurf-regressor"
          }

      - name: Get latest model version
        id: get_model_version
        run: |
          $version = az ml model list `
            --name smurf-regressor `
            --query "[].version | sort(@)[-1]" `
            -o tsv
          echo "LATEST_VERSION=$version" >> $env:GITHUB_ENV

      - name: Download latest model
        run: |
          az ml model download `
            --name smurf-regressor `
            --version $env:LATEST_VERSION `
            --download-path ./inference
      # --- End Azure ML Authentication and Model Download ---


      # --- Docker Build and Push (New/Modified Steps) ---
      - name: Docker login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          # Important: Ensure DOCKER_USERNAME and DOCKER_PASSWORD are set as GitHub Secrets
          # Or, if your image is public, you might omit this step, but it's good practice.

      - name: Build and Tag Docker image
        # Build the smurf-fastapi image.
        # Use a tag that reflects the new model version for better traceability,
        # but also tag 'latest' so our K8s deployment can easily pick it up.
        run: |
          docker build -t smurf-fastapi .
          # Use the DOCKER_USERNAME secret for tagging
          docker tag smurf-fastapi:latest ${{ secrets.DOCKER_USERNAME }}/smurf-fastapi:latest
          # You could also add a version-specific tag, e.g.:
          # docker tag smurf-fastapi:latest ${{ secrets.DOCKER_USERNAME }}/smurf-fastapi:${{ env.LATEST_VERSION }}

      - name: Push Docker image to Docker Hub
        # Push the 'latest' tag using the DOCKER_USERNAME secret.
        # Kubernetes will pull this when a rollout is triggered.
        run: docker push ${{ secrets.DOCKER_USERNAME }}/smurf-fastapi:latest
      # --- End Docker Build and Push ---


      # --- Kubernetes Deployment Update (New Steps) ---
      - name: Setup k3d kubeconfig
        # This step ensures kubectl can communicate with your k3d cluster.
        # It assumes k3d is installed and running on the self-hosted runner machine.
        # If the k3d cluster is not running, this might fail.
        run: |
          # Ensure k3d is in PATH or provide full path if needed
          k3d kubeconfig get k3s-default > $HOME/.kube/config
          # Set KUBECONFIG env var to ensure kubectl uses this file
          echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV
          # Verify kubectl can connect
          kubectl cluster-info

      - name: Trigger Kubernetes Deployment Rollout Restart
        # This command forces the 'smurf-fastapi' deployment to restart its pods.
        # When new pods are created, they will pull the new 'latest' image from Docker Hub.
        run: |
          kubectl rollout restart deployment/smurf-fastapi -n smurf-project
          # Optional: Wait for the rollout to complete
          kubectl rollout status deployment/smurf-fastapi -n smurf-project

      - name: Verify Pod Status (Optional)
        run: |
          # Give it a moment, then check pods
          sleep 10
          kubectl get pods -n smurf-project -o wide
